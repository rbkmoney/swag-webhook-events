/*
 * RBKmoney Webhooks Events API
 *  ## Webhooks Events API  Данная спецификация определяет протокол доставки оповещений о возникновении новых событий в рамках вашей организации, которые платформа доставляет в виде HTTP-запросов на URL-адреса созданных вами webhook'ов. Обработчики для подобного рода запросов необходимо реализовать на стороне вашего серверного кода согласно данной спецификации.  Webhook — это подписка на определенный тип события либо их группу, касающихся различных объектов в рамках вашей организации. Для управления webhook'ами используются методы RBKmoney API, описанные в спецификации [RBKmoney Webhooks Management API](https://rbkmoney.github.io/api#Webhooks). Когда наступает одно из событий в рамках определенного инвойса (например, изменение статуса инвойса или платежа по этому инвойсу), платформа выбирает webhook, подходящий под этот тип события, и отправляет HTTP-запрос, содержащий сообщение в формате JSON на указанный в этом webhook'е URL. Если вы создали несколько webhook'ов, подходящих под этот тип события, то событие доставляется одновременно на все заданные в них URL в неопределённом порядке.  ## Стратегия доставки  Платформа гарантирует порядок доставки событий в рамках определенного инвойса, никакое событие не может быть пропущено и доставлено не в порядке возникновения в платформе. Платформа поддерживает очередь сообщений для каждого инвойса для того, чтобы соблюсти эти гарантии.  Запрос на доставку считается успешным только при получении ответа со статусом `200`. Платформа будет ожидать успешного ответа на отправленный запрос в течение 10 секунд. В случае ответа любым другим статусом или по истечении указанного времени, отведённого на обработку оповещения, платформа будет пытаться повторно доставить оповещения до получения успешного ответа, либо до принятия решения о невозможности доставить информацию. Попытки доставки будут производиться со следующими временными интервалами между запросами:    - 30 секунд,   - 5 минут,   - 15 минут,   - 1 час.   - каждый час в течение суток (24 часа)  Если последняя попытка доставить оповещение оканчивается неудачей, все события, которые накопились в очереди этого инвойса, отбрасываются.  ## Авторизация полученных сообщений  Платформа подтверждает подлинность оповещений, подписывая сообщения приватным ключом, уникальным для каждого webhook'а, парный публичный ключ к которому содержится в данных этого webhook'а. Подпись передается в HTTP-заголовке `Content-Signature`. В заголовке в виде различных атрибутов содержится информация об использованном при формировании подписи алгоритме и значение подписи в формате [URL-safe base-64](https://tools.ietf.org/html/rfc4648).  ``` Content-Signature: alg=RS256; digest=zFuf7bRH4RHwyktaqHQwmX5rn3LfSb4dKo... ```  На данный момент возможно использование единственного алоритма формирования подписи.  ### [RS256](https://tools.ietf.org/html/rfc7518#section-3.3)  Подпись формируется согласно алгоритму [RSASSA-PKCS1-v1_5](https://tools.ietf.org/html/rfc3447#section-8.2), на вход которому подаётся результат вычисления хэша сообщения по алгоритму [SHA-256](https://tools.ietf.org/html/rfc6234).  Набор атрибутов заголовка и список возможных алгоритмов формирования подписи в дальнейшем могут быть расширены. 
 *
 * OpenAPI spec version: 1.0
 * Contact: tech-support@rbkmoney.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package com.rbkmoney.swag_webhook_events;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.v3.oas.annotations.media.Schema;
import java.io.IOException;

/**
 * Позиция товара или услуги
 */
@Schema(description = "Позиция товара или услуги")
@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.JavaClientCodegen", date = "2019-06-05T14:43:15.170+03:00[Europe/Moscow]")public class InvoiceCartLine {

  @SerializedName("product")
  private String product = null;

  @SerializedName("quantity")
  private Long quantity = 1l;

  @SerializedName("price")
  private Long price = null;

  @SerializedName("cost")
  private Long cost = null;

  @SerializedName("taxMode")
  private Object taxMode = null;
  public InvoiceCartLine product(String product) {
    this.product = product;
    return this;
  }

  

  /**
  * Описание предлагаемого товара или услуги
  * @return product
  **/
  @Schema(required = true, description = "Описание предлагаемого товара или услуги")
  public String getProduct() {
    return product;
  }
  public void setProduct(String product) {
    this.product = product;
  }
  public InvoiceCartLine quantity(Long quantity) {
    this.quantity = quantity;
    return this;
  }

  

  /**
  * Количество единиц товаров или услуг, предлагаемых на продажу в этой позиции 
  * minimum: 1
  * @return quantity
  **/
  @Schema(required = true, description = "Количество единиц товаров или услуг, предлагаемых на продажу в этой позиции ")
  public Long getQuantity() {
    return quantity;
  }
  public void setQuantity(Long quantity) {
    this.quantity = quantity;
  }
  public InvoiceCartLine price(Long price) {
    this.price = price;
    return this;
  }

  

  /**
  * Цена предлагаемого товара или услуги, в минорных денежных единицах, например в копейках в случае указания российских рублей в качестве валюты 
  * minimum: 1
  * @return price
  **/
  @Schema(required = true, description = "Цена предлагаемого товара или услуги, в минорных денежных единицах, например в копейках в случае указания российских рублей в качестве валюты ")
  public Long getPrice() {
    return price;
  }
  public void setPrice(Long price) {
    this.price = price;
  }
  public InvoiceCartLine cost(Long cost) {
    this.cost = cost;
    return this;
  }

  

  /**
  * Суммарная стоимость позиции с учётом количества единиц товаров или услуг 
  * minimum: 1
  * @return cost
  **/
  @Schema(required = true, description = "Суммарная стоимость позиции с учётом количества единиц товаров или услуг ")
  public Long getCost() {
    return cost;
  }
  public void setCost(Long cost) {
    this.cost = cost;
  }
  public InvoiceCartLine taxMode(Object taxMode) {
    this.taxMode = taxMode;
    return this;
  }

  

  /**
  * Схема налогообложения предлагаемого товара или услуги. Указывается, только если предлагаемый товар или услуга облагается налогом.
  * @return taxMode
  **/
  @Schema(description = "Схема налогообложения предлагаемого товара или услуги. Указывается, только если предлагаемый товар или услуга облагается налогом.")
  public Object getTaxMode() {
    return taxMode;
  }
  public void setTaxMode(Object taxMode) {
    this.taxMode = taxMode;
  }
  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    InvoiceCartLine invoiceCartLine = (InvoiceCartLine) o;
    return Objects.equals(this.product, invoiceCartLine.product) &&
        Objects.equals(this.quantity, invoiceCartLine.quantity) &&
        Objects.equals(this.price, invoiceCartLine.price) &&
        Objects.equals(this.cost, invoiceCartLine.cost) &&
        Objects.equals(this.taxMode, invoiceCartLine.taxMode);
  }

  @Override
  public int hashCode() {
    return java.util.Objects.hash(product, quantity, price, cost, taxMode);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class InvoiceCartLine {\n");
    
    sb.append("    product: ").append(toIndentedString(product)).append("\n");
    sb.append("    quantity: ").append(toIndentedString(quantity)).append("\n");
    sb.append("    price: ").append(toIndentedString(price)).append("\n");
    sb.append("    cost: ").append(toIndentedString(cost)).append("\n");
    sb.append("    taxMode: ").append(toIndentedString(taxMode)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
