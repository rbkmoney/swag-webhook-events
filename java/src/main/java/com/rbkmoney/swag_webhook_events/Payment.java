/*
 * RBKmoney Webhooks Events API
 *  ## Webhooks Events API  Данная спецификация определяет протокол доставки оповещений о возникновении новых событий в рамках вашей организации, которые платформа доставляет в виде HTTP-запросов на URL-адреса созданных вами webhook'ов. Обработчики для подобного рода запросов необходимо реализовать на стороне вашего серверного кода согласно данной спецификации.  Webhook — это подписка на определенный тип события либо их группу, касающихся различных объектов в рамках вашей организации. Для управления webhook'ами используются методы RBKmoney API, описанные в спецификации [RBKmoney Webhooks Management API](https://rbkmoney.github.io/api#Webhooks). Когда наступает одно из событий в рамках определенного инвойса (например, изменение статуса инвойса или платежа по этому инвойсу), платформа выбирает webhook, подходящий под этот тип события, и отправляет HTTP-запрос, содержащий сообщение в формате JSON на указанный в этом webhook'е URL. Если вы создали несколько webhook'ов, подходящих под этот тип события, то событие доставляется одновременно на все заданные в них URL в неопределённом порядке.  ## Стратегия доставки  Платформа гарантирует порядок доставки событий в рамках определенного инвойса, никакое событие не может быть пропущено и доставлено не в порядке возникновения в платформе. Платформа поддерживает очередь сообщений для каждого инвойса для того, чтобы соблюсти эти гарантии.  Запрос на доставку считается успешным только при получении ответа со статусом `200`. Платформа будет ожидать успешного ответа на отправленный запрос в течение 10 секунд. В случае ответа любым другим статусом или по истечении указанного времени, отведённого на обработку оповещения, платформа будет пытаться повторно доставить оповещения до получения успешного ответа, либо до принятия решения о невозможности доставить информацию. Попытки доставки будут производиться со следующими временными интервалами между запросами:    - 30 секунд,   - 5 минут,   - 15 минут,   - 1 час.   - каждый час в течение суток (24 часа)  Если последняя попытка доставить оповещение оканчивается неудачей, все события, которые накопились в очереди этого инвойса, отбрасываются.  ## Авторизация полученных сообщений  Платформа подтверждает подлинность оповещений, подписывая сообщения приватным ключом, уникальным для каждого webhook'а, парный публичный ключ к которому содержится в данных этого webhook'а. Подпись передается в HTTP-заголовке `Content-Signature`. В заголовке в виде различных атрибутов содержится информация об использованном при формировании подписи алгоритме и значение подписи в формате [URL-safe base-64](https://tools.ietf.org/html/rfc4648).  ``` Content-Signature: alg=RS256; digest=zFuf7bRH4RHwyktaqHQwmX5rn3LfSb4dKo... ```  На данный момент возможно использование единственного алоритма формирования подписи.  ### [RS256](https://tools.ietf.org/html/rfc7518#section-3.3)  Подпись формируется согласно алгоритму [RSASSA-PKCS1-v1_5](https://tools.ietf.org/html/rfc3447#section-8.2), на вход которому подаётся результат вычисления хэша сообщения по алгоритму [SHA-256](https://tools.ietf.org/html/rfc6234).  Набор атрибутов заголовка и список возможных алгоритмов формирования подписи в дальнейшем могут быть расширены. 
 *
 * OpenAPI spec version: 1.0
 * Contact: tech-support@rbkmoney.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package com.rbkmoney.swag_webhook_events;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.rbkmoney.swag_webhook_events.Payer;
import com.rbkmoney.swag_webhook_events.PaymentError;
import io.swagger.v3.oas.annotations.media.Schema;
import java.io.IOException;
import java.time.OffsetDateTime;

/**
 * Данные платежа в рамках инвойса
 */
@Schema(description = "Данные платежа в рамках инвойса")
@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.JavaClientCodegen", date = "2019-06-05T17:32:34.908+03:00[Europe/Moscow]")public class Payment {

  @SerializedName("id")
  private String id = null;

  @SerializedName("createdAt")
  private OffsetDateTime createdAt = null;
  /**
   * Статус платежа
   */
  @JsonAdapter(StatusEnum.Adapter.class)
  public enum StatusEnum {
    PENDING("pending"),
    PROCESSED("processed"),
    CAPTURED("captured"),
    CANCELLED("cancelled"),
    REFUNDED("refunded"),
    FAILED("failed");

    private String value;

    StatusEnum(String value) {
      this.value = value;
    }
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }
    public static StatusEnum fromValue(String text) {
      for (StatusEnum b : StatusEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }
    public static class Adapter extends TypeAdapter<StatusEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final StatusEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public StatusEnum read(final JsonReader jsonReader) throws IOException {
        String value = jsonReader.nextString();
        return StatusEnum.fromValue(String.valueOf(value));
      }
    }
  }
  @SerializedName("status")
  private StatusEnum status = null;

  @SerializedName("error")
  private PaymentError error = null;

  @SerializedName("amount")
  private Long amount = null;

  @SerializedName("currency")
  private String currency = null;

  @SerializedName("metadata")
  private Object metadata = null;

  @SerializedName("paymentToolToken")
  private String paymentToolToken = null;

  @SerializedName("paymentSession")
  private String paymentSession = null;

  @SerializedName("contactInfo")
  private Object contactInfo = null;

  @SerializedName("ip")
  private String ip = null;

  @SerializedName("fingerprint")
  private String fingerprint = null;

  @SerializedName("payer")
  private Payer payer = null;
  public Payment id(String id) {
    this.id = id;
    return this;
  }

  

  /**
  * Идентификатор платежа
  * @return id
  **/
  @Schema(required = true, description = "Идентификатор платежа")
  public String getId() {
    return id;
  }
  public void setId(String id) {
    this.id = id;
  }
  public Payment createdAt(OffsetDateTime createdAt) {
    this.createdAt = createdAt;
    return this;
  }

  

  /**
  * Дата и время создания
  * @return createdAt
  **/
  @Schema(required = true, description = "Дата и время создания")
  public OffsetDateTime getCreatedAt() {
    return createdAt;
  }
  public void setCreatedAt(OffsetDateTime createdAt) {
    this.createdAt = createdAt;
  }
  public Payment status(StatusEnum status) {
    this.status = status;
    return this;
  }

  

  /**
  * Статус платежа
  * @return status
  **/
  @Schema(required = true, description = "Статус платежа")
  public StatusEnum getStatus() {
    return status;
  }
  public void setStatus(StatusEnum status) {
    this.status = status;
  }
  public Payment error(PaymentError error) {
    this.error = error;
    return this;
  }

  

  /**
  * Get error
  * @return error
  **/
  @Schema(description = "")
  public PaymentError getError() {
    return error;
  }
  public void setError(PaymentError error) {
    this.error = error;
  }
  public Payment amount(Long amount) {
    this.amount = amount;
    return this;
  }

  

  /**
  * Стоимость предлагаемых товаров или услуг, в минорных денежных единицах, например в копейках в случае указания российских рублей в качестве валюты. 
  * minimum: 1
  * @return amount
  **/
  @Schema(required = true, description = "Стоимость предлагаемых товаров или услуг, в минорных денежных единицах, например в копейках в случае указания российских рублей в качестве валюты. ")
  public Long getAmount() {
    return amount;
  }
  public void setAmount(Long amount) {
    this.amount = amount;
  }
  public Payment currency(String currency) {
    this.currency = currency;
    return this;
  }

  

  /**
  * Валюта, символьный код согласно [RFC 4217](http://www.iso.org/iso/home/standards/currency_codes.htm). 
  * @return currency
  **/
  @Schema(required = true, description = "Валюта, символьный код согласно [RFC 4217](http://www.iso.org/iso/home/standards/currency_codes.htm). ")
  public String getCurrency() {
    return currency;
  }
  public void setCurrency(String currency) {
    this.currency = currency;
  }
  public Payment metadata(Object metadata) {
    this.metadata = metadata;
    return this;
  }

  

  /**
  * Связанные с платежом метаданные
  * @return metadata
  **/
  @Schema(description = "Связанные с платежом метаданные")
  public Object getMetadata() {
    return metadata;
  }
  public void setMetadata(Object metadata) {
    this.metadata = metadata;
  }
  public Payment paymentToolToken(String paymentToolToken) {
    this.paymentToolToken = paymentToolToken;
    return this;
  }

  

  /**
  * **Deprecated.** _Используйте свойство &#x60;payer&#x60;._ Токен платежного средства, предоставленного плательщиком 
  * @return paymentToolToken
  **/
  @Schema(description = "**Deprecated.** _Используйте свойство `payer`._ Токен платежного средства, предоставленного плательщиком ")
  public String getPaymentToolToken() {
    return paymentToolToken;
  }
  public void setPaymentToolToken(String paymentToolToken) {
    this.paymentToolToken = paymentToolToken;
  }
  public Payment paymentSession(String paymentSession) {
    this.paymentSession = paymentSession;
    return this;
  }

  

  /**
  * **Deprecated.** _Используйте свойство &#x60;payer&#x60;._ Идентификатор платежной сессии 
  * @return paymentSession
  **/
  @Schema(required = true, description = "**Deprecated.** _Используйте свойство `payer`._ Идентификатор платежной сессии ")
  public String getPaymentSession() {
    return paymentSession;
  }
  public void setPaymentSession(String paymentSession) {
    this.paymentSession = paymentSession;
  }
  public Payment contactInfo(Object contactInfo) {
    this.contactInfo = contactInfo;
    return this;
  }

  

  /**
  * **Deprecated.** _Используйте свойство &#x60;payer&#x60;._ Контактные данные плательщика 
  * @return contactInfo
  **/
  @Schema(required = true, description = "**Deprecated.** _Используйте свойство `payer`._ Контактные данные плательщика ")
  public Object getContactInfo() {
    return contactInfo;
  }
  public void setContactInfo(Object contactInfo) {
    this.contactInfo = contactInfo;
  }
  public Payment ip(String ip) {
    this.ip = ip;
    return this;
  }

  

  /**
  * **Deprecated.** _Используйте свойство &#x60;payer&#x60;._ IP-адрес плательщика 
  * @return ip
  **/
  @Schema(description = "**Deprecated.** _Используйте свойство `payer`._ IP-адрес плательщика ")
  public String getIp() {
    return ip;
  }
  public void setIp(String ip) {
    this.ip = ip;
  }
  public Payment fingerprint(String fingerprint) {
    this.fingerprint = fingerprint;
    return this;
  }

  

  /**
  * **Deprecated.** _Используйте свойство &#x60;payer&#x60;._ Уникальный отпечаток user agent&#x27;а плательщика 
  * @return fingerprint
  **/
  @Schema(description = "**Deprecated.** _Используйте свойство `payer`._ Уникальный отпечаток user agent'а плательщика ")
  public String getFingerprint() {
    return fingerprint;
  }
  public void setFingerprint(String fingerprint) {
    this.fingerprint = fingerprint;
  }
  public Payment payer(Payer payer) {
    this.payer = payer;
    return this;
  }

  

  /**
  * Get payer
  * @return payer
  **/
  @Schema(required = true, description = "")
  public Payer getPayer() {
    return payer;
  }
  public void setPayer(Payer payer) {
    this.payer = payer;
  }
  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Payment payment = (Payment) o;
    return Objects.equals(this.id, payment.id) &&
        Objects.equals(this.createdAt, payment.createdAt) &&
        Objects.equals(this.status, payment.status) &&
        Objects.equals(this.error, payment.error) &&
        Objects.equals(this.amount, payment.amount) &&
        Objects.equals(this.currency, payment.currency) &&
        Objects.equals(this.metadata, payment.metadata) &&
        Objects.equals(this.paymentToolToken, payment.paymentToolToken) &&
        Objects.equals(this.paymentSession, payment.paymentSession) &&
        Objects.equals(this.contactInfo, payment.contactInfo) &&
        Objects.equals(this.ip, payment.ip) &&
        Objects.equals(this.fingerprint, payment.fingerprint) &&
        Objects.equals(this.payer, payment.payer);
  }

  @Override
  public int hashCode() {
    return java.util.Objects.hash(id, createdAt, status, error, amount, currency, metadata, paymentToolToken, paymentSession, contactInfo, ip, fingerprint, payer);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Payment {\n");
    
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    createdAt: ").append(toIndentedString(createdAt)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("    error: ").append(toIndentedString(error)).append("\n");
    sb.append("    amount: ").append(toIndentedString(amount)).append("\n");
    sb.append("    currency: ").append(toIndentedString(currency)).append("\n");
    sb.append("    metadata: ").append(toIndentedString(metadata)).append("\n");
    sb.append("    paymentToolToken: ").append(toIndentedString(paymentToolToken)).append("\n");
    sb.append("    paymentSession: ").append(toIndentedString(paymentSession)).append("\n");
    sb.append("    contactInfo: ").append(toIndentedString(contactInfo)).append("\n");
    sb.append("    ip: ").append(toIndentedString(ip)).append("\n");
    sb.append("    fingerprint: ").append(toIndentedString(fingerprint)).append("\n");
    sb.append("    payer: ").append(toIndentedString(payer)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
